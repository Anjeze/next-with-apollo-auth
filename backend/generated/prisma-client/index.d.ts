// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  location: (where?: LocationWhereInput) => Promise<boolean>;
  match: (where?: MatchWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  match: (where: MatchWhereUniqueInput) => MatchNullablePromise;
  matches: (args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Match>;
  matchesConnection: (args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MatchConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createMatch: (data: MatchCreateInput) => MatchPromise;
  updateMatch: (args: {
    data: MatchUpdateInput;
    where: MatchWhereUniqueInput;
  }) => MatchPromise;
  updateManyMatches: (args: {
    data: MatchUpdateManyMutationInput;
    where?: MatchWhereInput;
  }) => BatchPayloadPromise;
  upsertMatch: (args: {
    where: MatchWhereUniqueInput;
    create: MatchCreateInput;
    update: MatchUpdateInput;
  }) => MatchPromise;
  deleteMatch: (where: MatchWhereUniqueInput) => MatchPromise;
  deleteManyMatches: (where?: MatchWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  match: (
    where?: MatchSubscriptionWhereInput
  ) => MatchSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MatchOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "kickoff_ASC"
  | "kickoff_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "maxPlayers_ASC"
  | "maxPlayers_DESC"
  | "price_ASC"
  | "price_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "userName_ASC"
  | "userName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "profilePic_ASC"
  | "profilePic_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface MatchUpdateWithWhereUniqueWithoutLocationInput {
  where: MatchWhereUniqueInput;
  data: MatchUpdateWithoutLocationDataInput;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  title?: Maybe<String>;
}>;

export interface UserUpdateWithoutHostedMatchesDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  userName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  playedMatches?: Maybe<MatchUpdateManyWithoutPlayersInput>;
}

export interface MatchWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  kickoff_not?: Maybe<DateTimeInput>;
  kickoff_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  kickoff_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  kickoff_lt?: Maybe<DateTimeInput>;
  kickoff_lte?: Maybe<DateTimeInput>;
  kickoff_gt?: Maybe<DateTimeInput>;
  kickoff_gte?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  location?: Maybe<LocationWhereInput>;
  maxPlayers?: Maybe<Int>;
  maxPlayers_not?: Maybe<Int>;
  maxPlayers_in?: Maybe<Int[] | Int>;
  maxPlayers_not_in?: Maybe<Int[] | Int>;
  maxPlayers_lt?: Maybe<Int>;
  maxPlayers_lte?: Maybe<Int>;
  maxPlayers_gt?: Maybe<Int>;
  maxPlayers_gte?: Maybe<Int>;
  host?: Maybe<UserWhereInput>;
  players_every?: Maybe<UserWhereInput>;
  players_some?: Maybe<UserWhereInput>;
  players_none?: Maybe<UserWhereInput>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MatchWhereInput[] | MatchWhereInput>;
  OR?: Maybe<MatchWhereInput[] | MatchWhereInput>;
  NOT?: Maybe<MatchWhereInput[] | MatchWhereInput>;
}

export interface MatchUpdateManyWithoutPlayersInput {
  create?: Maybe<
    MatchCreateWithoutPlayersInput[] | MatchCreateWithoutPlayersInput
  >;
  delete?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  connect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  set?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  disconnect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  update?: Maybe<
    | MatchUpdateWithWhereUniqueWithoutPlayersInput[]
    | MatchUpdateWithWhereUniqueWithoutPlayersInput
  >;
  upsert?: Maybe<
    | MatchUpsertWithWhereUniqueWithoutPlayersInput[]
    | MatchUpsertWithWhereUniqueWithoutPlayersInput
  >;
  deleteMany?: Maybe<MatchScalarWhereInput[] | MatchScalarWhereInput>;
  updateMany?: Maybe<
    MatchUpdateManyWithWhereNestedInput[] | MatchUpdateManyWithWhereNestedInput
  >;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  matches_every?: Maybe<MatchWhereInput>;
  matches_some?: Maybe<MatchWhereInput>;
  matches_none?: Maybe<MatchWhereInput>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface LocationCreateWithoutMatchesInput {
  id?: Maybe<ID_Input>;
  coordinates?: Maybe<LocationCreatecoordinatesInput>;
  title: String;
  description: String;
}

export interface MatchUpdateWithWhereUniqueWithoutHostInput {
  where: MatchWhereUniqueInput;
  data: MatchUpdateWithoutHostDataInput;
}

export interface UserCreateManyWithoutPlayedMatchesInput {
  create?: Maybe<
    UserCreateWithoutPlayedMatchesInput[] | UserCreateWithoutPlayedMatchesInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface MatchUpdateWithWhereUniqueWithoutPlayersInput {
  where: MatchWhereUniqueInput;
  data: MatchUpdateWithoutPlayersDataInput;
}

export interface UserCreateWithoutPlayedMatchesInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  userName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  hostedMatches?: Maybe<MatchCreateManyWithoutHostInput>;
}

export interface MatchSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MatchWhereInput>;
  AND?: Maybe<MatchSubscriptionWhereInput[] | MatchSubscriptionWhereInput>;
  OR?: Maybe<MatchSubscriptionWhereInput[] | MatchSubscriptionWhereInput>;
  NOT?: Maybe<MatchSubscriptionWhereInput[] | MatchSubscriptionWhereInput>;
}

export interface MatchCreateManyWithoutHostInput {
  create?: Maybe<MatchCreateWithoutHostInput[] | MatchCreateWithoutHostInput>;
  connect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  userName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
}

export interface MatchCreateWithoutHostInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  kickoff: DateTimeInput;
  duration: Int;
  location: LocationCreateOneWithoutMatchesInput;
  maxPlayers: Int;
  players?: Maybe<UserCreateManyWithoutPlayedMatchesInput>;
  price: Int;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  userName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  hostedMatches?: Maybe<MatchCreateManyWithoutHostInput>;
  playedMatches?: Maybe<MatchCreateManyWithoutPlayersInput>;
}

export interface LocationUpdateInput {
  coordinates?: Maybe<LocationUpdatecoordinatesInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  matches?: Maybe<MatchUpdateManyWithoutLocationInput>;
}

export interface MatchUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  location?: Maybe<LocationUpdateOneRequiredWithoutMatchesInput>;
  maxPlayers?: Maybe<Int>;
  host?: Maybe<UserUpdateOneRequiredWithoutHostedMatchesInput>;
  players?: Maybe<UserUpdateManyWithoutPlayedMatchesInput>;
  price?: Maybe<Int>;
}

export interface LocationUpdatecoordinatesInput {
  set?: Maybe<Float[] | Float>;
}

export interface MatchCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  kickoff: DateTimeInput;
  duration: Int;
  location: LocationCreateOneWithoutMatchesInput;
  maxPlayers: Int;
  host: UserCreateOneWithoutHostedMatchesInput;
  players?: Maybe<UserCreateManyWithoutPlayedMatchesInput>;
  price: Int;
}

export interface MatchUpdateManyWithoutLocationInput {
  create?: Maybe<
    MatchCreateWithoutLocationInput[] | MatchCreateWithoutLocationInput
  >;
  delete?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  connect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  set?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  disconnect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  update?: Maybe<
    | MatchUpdateWithWhereUniqueWithoutLocationInput[]
    | MatchUpdateWithWhereUniqueWithoutLocationInput
  >;
  upsert?: Maybe<
    | MatchUpsertWithWhereUniqueWithoutLocationInput[]
    | MatchUpsertWithWhereUniqueWithoutLocationInput
  >;
  deleteMany?: Maybe<MatchScalarWhereInput[] | MatchScalarWhereInput>;
  updateMany?: Maybe<
    MatchUpdateManyWithWhereNestedInput[] | MatchUpdateManyWithWhereNestedInput
  >;
}

export interface MatchUpsertWithWhereUniqueWithoutLocationInput {
  where: MatchWhereUniqueInput;
  update: MatchUpdateWithoutLocationDataInput;
  create: MatchCreateWithoutLocationInput;
}

export interface UserUpsertWithWhereUniqueWithoutPlayedMatchesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutPlayedMatchesDataInput;
  create: UserCreateWithoutPlayedMatchesInput;
}

export interface UserUpdateManyDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  userName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
}

export interface MatchUpdateWithoutLocationDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  maxPlayers?: Maybe<Int>;
  host?: Maybe<UserUpdateOneRequiredWithoutHostedMatchesInput>;
  players?: Maybe<UserUpdateManyWithoutPlayedMatchesInput>;
  price?: Maybe<Int>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profilePic?: Maybe<String>;
  profilePic_not?: Maybe<String>;
  profilePic_in?: Maybe<String[] | String>;
  profilePic_not_in?: Maybe<String[] | String>;
  profilePic_lt?: Maybe<String>;
  profilePic_lte?: Maybe<String>;
  profilePic_gt?: Maybe<String>;
  profilePic_gte?: Maybe<String>;
  profilePic_contains?: Maybe<String>;
  profilePic_not_contains?: Maybe<String>;
  profilePic_starts_with?: Maybe<String>;
  profilePic_not_starts_with?: Maybe<String>;
  profilePic_ends_with?: Maybe<String>;
  profilePic_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateOneRequiredWithoutHostedMatchesInput {
  create?: Maybe<UserCreateWithoutHostedMatchesInput>;
  update?: Maybe<UserUpdateWithoutHostedMatchesDataInput>;
  upsert?: Maybe<UserUpsertWithoutHostedMatchesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  coordinates?: Maybe<LocationCreatecoordinatesInput>;
  title: String;
  description: String;
  matches?: Maybe<MatchCreateManyWithoutLocationInput>;
}

export interface MatchUpsertWithWhereUniqueWithoutHostInput {
  where: MatchWhereUniqueInput;
  update: MatchUpdateWithoutHostDataInput;
  create: MatchCreateWithoutHostInput;
}

export interface MatchCreateManyWithoutLocationInput {
  create?: Maybe<
    MatchCreateWithoutLocationInput[] | MatchCreateWithoutLocationInput
  >;
  connect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profilePic?: Maybe<String>;
  profilePic_not?: Maybe<String>;
  profilePic_in?: Maybe<String[] | String>;
  profilePic_not_in?: Maybe<String[] | String>;
  profilePic_lt?: Maybe<String>;
  profilePic_lte?: Maybe<String>;
  profilePic_gt?: Maybe<String>;
  profilePic_gte?: Maybe<String>;
  profilePic_contains?: Maybe<String>;
  profilePic_not_contains?: Maybe<String>;
  profilePic_starts_with?: Maybe<String>;
  profilePic_not_starts_with?: Maybe<String>;
  profilePic_ends_with?: Maybe<String>;
  profilePic_not_ends_with?: Maybe<String>;
  hostedMatches_every?: Maybe<MatchWhereInput>;
  hostedMatches_some?: Maybe<MatchWhereInput>;
  hostedMatches_none?: Maybe<MatchWhereInput>;
  playedMatches_every?: Maybe<MatchWhereInput>;
  playedMatches_some?: Maybe<MatchWhereInput>;
  playedMatches_none?: Maybe<MatchWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserCreateOneWithoutHostedMatchesInput {
  create?: Maybe<UserCreateWithoutHostedMatchesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface MatchUpdateWithoutHostDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  location?: Maybe<LocationUpdateOneRequiredWithoutMatchesInput>;
  maxPlayers?: Maybe<Int>;
  players?: Maybe<UserUpdateManyWithoutPlayedMatchesInput>;
  price?: Maybe<Int>;
}

export interface MatchCreateManyWithoutPlayersInput {
  create?: Maybe<
    MatchCreateWithoutPlayersInput[] | MatchCreateWithoutPlayersInput
  >;
  connect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
}

export interface MatchUpdateWithoutPlayersDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  location?: Maybe<LocationUpdateOneRequiredWithoutMatchesInput>;
  maxPlayers?: Maybe<Int>;
  host?: Maybe<UserUpdateOneRequiredWithoutHostedMatchesInput>;
  price?: Maybe<Int>;
}

export interface LocationCreateOneWithoutMatchesInput {
  create?: Maybe<LocationCreateWithoutMatchesInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface LocationUpdateOneRequiredWithoutMatchesInput {
  create?: Maybe<LocationCreateWithoutMatchesInput>;
  update?: Maybe<LocationUpdateWithoutMatchesDataInput>;
  upsert?: Maybe<LocationUpsertWithoutMatchesInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface LocationUpdateWithoutMatchesDataInput {
  coordinates?: Maybe<LocationUpdatecoordinatesInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface MatchUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  maxPlayers?: Maybe<Int>;
  price?: Maybe<Int>;
}

export interface LocationUpsertWithoutMatchesInput {
  update: LocationUpdateWithoutMatchesDataInput;
  create: LocationCreateWithoutMatchesInput;
}

export interface LocationUpdateManyMutationInput {
  coordinates?: Maybe<LocationUpdatecoordinatesInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface MatchUpsertWithWhereUniqueWithoutPlayersInput {
  where: MatchWhereUniqueInput;
  update: MatchUpdateWithoutPlayersDataInput;
  create: MatchCreateWithoutPlayersInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface MatchScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  kickoff_not?: Maybe<DateTimeInput>;
  kickoff_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  kickoff_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  kickoff_lt?: Maybe<DateTimeInput>;
  kickoff_lte?: Maybe<DateTimeInput>;
  kickoff_gt?: Maybe<DateTimeInput>;
  kickoff_gte?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  maxPlayers?: Maybe<Int>;
  maxPlayers_not?: Maybe<Int>;
  maxPlayers_in?: Maybe<Int[] | Int>;
  maxPlayers_not_in?: Maybe<Int[] | Int>;
  maxPlayers_lt?: Maybe<Int>;
  maxPlayers_lte?: Maybe<Int>;
  maxPlayers_gt?: Maybe<Int>;
  maxPlayers_gte?: Maybe<Int>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MatchScalarWhereInput[] | MatchScalarWhereInput>;
  OR?: Maybe<MatchScalarWhereInput[] | MatchScalarWhereInput>;
  NOT?: Maybe<MatchScalarWhereInput[] | MatchScalarWhereInput>;
}

export interface LocationCreatecoordinatesInput {
  set?: Maybe<Float[] | Float>;
}

export interface MatchUpdateManyWithWhereNestedInput {
  where: MatchScalarWhereInput;
  data: MatchUpdateManyDataInput;
}

export interface UserCreateWithoutHostedMatchesInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  userName: String;
  email: String;
  password: String;
  profilePic?: Maybe<String>;
  playedMatches?: Maybe<MatchCreateManyWithoutPlayersInput>;
}

export interface MatchUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  kickoff?: Maybe<DateTimeInput>;
  duration?: Maybe<Int>;
  maxPlayers?: Maybe<Int>;
  price?: Maybe<Int>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpsertWithoutHostedMatchesInput {
  update: UserUpdateWithoutHostedMatchesDataInput;
  create: UserCreateWithoutHostedMatchesInput;
}

export type MatchWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MatchUpdateManyWithoutHostInput {
  create?: Maybe<MatchCreateWithoutHostInput[] | MatchCreateWithoutHostInput>;
  delete?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  connect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  set?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  disconnect?: Maybe<MatchWhereUniqueInput[] | MatchWhereUniqueInput>;
  update?: Maybe<
    | MatchUpdateWithWhereUniqueWithoutHostInput[]
    | MatchUpdateWithWhereUniqueWithoutHostInput
  >;
  upsert?: Maybe<
    | MatchUpsertWithWhereUniqueWithoutHostInput[]
    | MatchUpsertWithWhereUniqueWithoutHostInput
  >;
  deleteMany?: Maybe<MatchScalarWhereInput[] | MatchScalarWhereInput>;
  updateMany?: Maybe<
    MatchUpdateManyWithWhereNestedInput[] | MatchUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithoutPlayedMatchesDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  userName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  hostedMatches?: Maybe<MatchUpdateManyWithoutHostInput>;
}

export interface UserUpdateWithWhereUniqueWithoutPlayedMatchesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutPlayedMatchesDataInput;
}

export interface UserUpdateManyWithoutPlayedMatchesInput {
  create?: Maybe<
    UserCreateWithoutPlayedMatchesInput[] | UserCreateWithoutPlayedMatchesInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutPlayedMatchesInput[]
    | UserUpdateWithWhereUniqueWithoutPlayedMatchesInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutPlayedMatchesInput[]
    | UserUpsertWithWhereUniqueWithoutPlayedMatchesInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface MatchCreateWithoutLocationInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  kickoff: DateTimeInput;
  duration: Int;
  maxPlayers: Int;
  host: UserCreateOneWithoutHostedMatchesInput;
  players?: Maybe<UserCreateManyWithoutPlayedMatchesInput>;
  price: Int;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userName?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  userName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<String>;
  hostedMatches?: Maybe<MatchUpdateManyWithoutHostInput>;
  playedMatches?: Maybe<MatchUpdateManyWithoutPlayersInput>;
}

export interface MatchCreateWithoutPlayersInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  kickoff: DateTimeInput;
  duration: Int;
  location: LocationCreateOneWithoutMatchesInput;
  maxPlayers: Int;
  host: UserCreateOneWithoutHostedMatchesInput;
  price: Int;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  userName: String;
  email: String;
  password: String;
  profilePic: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  userName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profilePic: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profilePic: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MatchConnection {
  pageInfo: PageInfo;
  edges: MatchEdge[];
}

export interface MatchConnectionPromise
  extends Promise<MatchConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MatchEdge>>() => T;
  aggregate: <T = AggregateMatchPromise>() => T;
}

export interface MatchConnectionSubscription
  extends Promise<AsyncIterator<MatchConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MatchEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMatchSubscription>() => T;
}

export interface LocationPreviousValues {
  id: ID_Output;
  coordinates: Float[];
  title: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  coordinates: () => Promise<Float[]>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  coordinates: () => Promise<AsyncIterator<Float[]>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Match {
  id: ID_Output;
  title: String;
  description: String;
  kickoff: DateTimeOutput;
  duration: Int;
  maxPlayers: Int;
  price: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MatchPromise extends Promise<Match>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  kickoff: () => Promise<DateTimeOutput>;
  duration: () => Promise<Int>;
  location: <T = LocationPromise>() => T;
  maxPlayers: () => Promise<Int>;
  host: <T = UserPromise>() => T;
  players: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  price: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MatchSubscription
  extends Promise<AsyncIterator<Match>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  kickoff: () => Promise<AsyncIterator<DateTimeOutput>>;
  duration: () => Promise<AsyncIterator<Int>>;
  location: <T = LocationSubscription>() => T;
  maxPlayers: () => Promise<AsyncIterator<Int>>;
  host: <T = UserSubscription>() => T;
  players: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  price: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MatchNullablePromise
  extends Promise<Match | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  kickoff: () => Promise<DateTimeOutput>;
  duration: () => Promise<Int>;
  location: <T = LocationPromise>() => T;
  maxPlayers: () => Promise<Int>;
  host: <T = UserPromise>() => T;
  players: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  price: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MatchPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  kickoff: DateTimeOutput;
  duration: Int;
  maxPlayers: Int;
  price: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MatchPreviousValuesPromise
  extends Promise<MatchPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  kickoff: () => Promise<DateTimeOutput>;
  duration: () => Promise<Int>;
  maxPlayers: () => Promise<Int>;
  price: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MatchPreviousValuesSubscription
  extends Promise<AsyncIterator<MatchPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  kickoff: () => Promise<AsyncIterator<DateTimeOutput>>;
  duration: () => Promise<AsyncIterator<Int>>;
  maxPlayers: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface MatchEdge {
  node: Match;
  cursor: String;
}

export interface MatchEdgePromise extends Promise<MatchEdge>, Fragmentable {
  node: <T = MatchPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MatchEdgeSubscription
  extends Promise<AsyncIterator<MatchEdge>>,
    Fragmentable {
  node: <T = MatchSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  userName: String;
  email: String;
  password: String;
  profilePic: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  userName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profilePic: () => Promise<String>;
  hostedMatches: <T = FragmentableArray<Match>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  playedMatches: <T = FragmentableArray<Match>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  userName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profilePic: () => Promise<AsyncIterator<String>>;
  hostedMatches: <T = Promise<AsyncIterator<MatchSubscription>>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  playedMatches: <T = Promise<AsyncIterator<MatchSubscription>>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  userName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profilePic: () => Promise<String>;
  hostedMatches: <T = FragmentableArray<Match>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  playedMatches: <T = FragmentableArray<Match>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface MatchSubscriptionPayload {
  mutation: MutationType;
  node: Match;
  updatedFields: String[];
  previousValues: MatchPreviousValues;
}

export interface MatchSubscriptionPayloadPromise
  extends Promise<MatchSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MatchPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MatchPreviousValuesPromise>() => T;
}

export interface MatchSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MatchSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MatchSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MatchPreviousValuesSubscription>() => T;
}

export interface Location {
  id: ID_Output;
  coordinates: Float[];
  title: String;
  description: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  coordinates: () => Promise<Float[]>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  matches: <T = FragmentableArray<Match>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  coordinates: () => Promise<AsyncIterator<Float[]>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  matches: <T = Promise<AsyncIterator<MatchSubscription>>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  coordinates: () => Promise<Float[]>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  matches: <T = FragmentableArray<Match>>(args?: {
    where?: MatchWhereInput;
    orderBy?: MatchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateMatch {
  count: Int;
}

export interface AggregateMatchPromise
  extends Promise<AggregateMatch>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMatchSubscription
  extends Promise<AsyncIterator<AggregateMatch>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Match",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
